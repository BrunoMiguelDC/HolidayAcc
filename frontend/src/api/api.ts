/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Apartment Reservation Management API
 * This API exposes endpoints to manage apartment reservations.
 *
 * OpenAPI spec version: 1.0
 * Contact: holidayacc@gmail.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface ApartmentCreateDTO
 */
export interface ApartmentCreateDTO {
    /**
     *
     * @type {string}
     * @memberof ApartmentCreateDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentCreateDTO
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentCreateDTO
     */
    location: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ApartmentCreateDTO
     */
    amenities: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ApartmentCreateDTO
     */
    pictures: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ApartmentCreateDTO
     */
    price: number;
    /**
     *
     * @type {boolean}
     * @memberof ApartmentCreateDTO
     */
    available: boolean;
    /**
     *
     * @type {number}
     * @memberof ApartmentCreateDTO
     */
    maxGuests: number;
    /**
     *
     * @type {string}
     * @memberof ApartmentCreateDTO
     */
    ownerUsername: string;
}
/**
 *
 * @export
 * @interface ApartmentDTO
 */
export interface ApartmentDTO {
    /**
     *
     * @type {string}
     * @memberof ApartmentDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentDTO
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentDTO
     */
    location: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ApartmentDTO
     */
    amenities: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ApartmentDTO
     */
    pictures: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ApartmentDTO
     */
    price: number;
    /**
     *
     * @type {boolean}
     * @memberof ApartmentDTO
     */
    available: boolean;
    /**
     *
     * @type {number}
     * @memberof ApartmentDTO
     */
    maxGuests: number;
    /**
     *
     * @type {UserShortDTO}
     * @memberof ApartmentDTO
     */
    owner: UserShortDTO;
}
/**
 *
 * @export
 * @interface ApartmentDeleteDTO
 */
export interface ApartmentDeleteDTO {
    /**
     *
     * @type {number}
     * @memberof ApartmentDeleteDTO
     */
    apartmentId: number;
    /**
     *
     * @type {string}
     * @memberof ApartmentDeleteDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentDeleteDTO
     */
    location: string;
    /**
     *
     * @type {UserShortDTO}
     * @memberof ApartmentDeleteDTO
     */
    owner: UserShortDTO;
}
/**
 *
 * @export
 * @interface ApartmentListDTO
 */
export interface ApartmentListDTO {
    /**
     *
     * @type {number}
     * @memberof ApartmentListDTO
     */
    apartmentId: number;
    /**
     *
     * @type {string}
     * @memberof ApartmentListDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentListDTO
     */
    location: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentListDTO
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentListDTO
     */
    picture: string;
    /**
     *
     * @type {number}
     * @memberof ApartmentListDTO
     */
    price: number;
    /**
     *
     * @type {boolean}
     * @memberof ApartmentListDTO
     */
    available: boolean;
    /**
     *
     * @type {number}
     * @memberof ApartmentListDTO
     */
    maxGuests: number;
    /**
     *
     * @type {UserShortDTO}
     * @memberof ApartmentListDTO
     */
    owner: UserShortDTO;
}
/**
 *
 * @export
 * @interface ApartmentShortDTO
 */
export interface ApartmentShortDTO {
    /**
     *
     * @type {number}
     * @memberof ApartmentShortDTO
     */
    apartmentId: number;
    /**
     *
     * @type {string}
     * @memberof ApartmentShortDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentShortDTO
     */
    location: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentShortDTO
     */
    picture: string;
    /**
     *
     * @type {number}
     * @memberof ApartmentShortDTO
     */
    price: number;
    /**
     *
     * @type {boolean}
     * @memberof ApartmentShortDTO
     */
    available: boolean;
    /**
     *
     * @type {number}
     * @memberof ApartmentShortDTO
     */
    maxGuests: number;
}
/**
 *
 * @export
 * @interface ApartmentShortInfoDTO
 */
export interface ApartmentShortInfoDTO {
    /**
     *
     * @type {number}
     * @memberof ApartmentShortInfoDTO
     */
    apartmentId: number;
    /**
     *
     * @type {string}
     * @memberof ApartmentShortInfoDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentShortInfoDTO
     */
    location: string;
    /**
     *
     * @type {number}
     * @memberof ApartmentShortInfoDTO
     */
    price: number;
}
/**
 *
 * @export
 * @interface ApartmentUpdateDTO
 */
export interface ApartmentUpdateDTO {
    /**
     *
     * @type {string}
     * @memberof ApartmentUpdateDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ApartmentUpdateDTO
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ApartmentUpdateDTO
     */
    amenities?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ApartmentUpdateDTO
     */
    pictures?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ApartmentUpdateDTO
     */
    price?: number;
    /**
     *
     * @type {boolean}
     * @memberof ApartmentUpdateDTO
     */
    available?: boolean;
    /**
     *
     * @type {number}
     * @memberof ApartmentUpdateDTO
     */
    maxGuests?: number;
}
/**
 *
 * @export
 * @interface LoginDTO
 */
export interface LoginDTO {
    /**
     *
     * @type {string}
     * @memberof LoginDTO
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof LoginDTO
     */
    password: string;
}
/**
 *
 * @export
 * @interface PageableListDTOApartmentListDTO
 */
export interface PageableListDTOApartmentListDTO {
    /**
     *
     * @type {Array<ApartmentListDTO>}
     * @memberof PageableListDTOApartmentListDTO
     */
    list: Array<ApartmentListDTO>;
    /**
     *
     * @type {number}
     * @memberof PageableListDTOApartmentListDTO
     */
    numPages: number;
}
/**
 *
 * @export
 * @interface PageableListDTOReservationApartmentsListDTO
 */
export interface PageableListDTOReservationApartmentsListDTO {
    /**
     *
     * @type {Array<ReservationApartmentsListDTO>}
     * @memberof PageableListDTOReservationApartmentsListDTO
     */
    list: Array<ReservationApartmentsListDTO>;
    /**
     *
     * @type {number}
     * @memberof PageableListDTOReservationApartmentsListDTO
     */
    numPages: number;
}
/**
 *
 * @export
 * @interface PageableListDTOReservationUsersListDTO
 */
export interface PageableListDTOReservationUsersListDTO {
    /**
     *
     * @type {Array<ReservationUsersListDTO>}
     * @memberof PageableListDTOReservationUsersListDTO
     */
    list: Array<ReservationUsersListDTO>;
    /**
     *
     * @type {number}
     * @memberof PageableListDTOReservationUsersListDTO
     */
    numPages: number;
}
/**
 *
 * @export
 * @interface PageableListDTOUserListDTO
 */
export interface PageableListDTOUserListDTO {
    /**
     *
     * @type {Array<UserListDTO>}
     * @memberof PageableListDTOUserListDTO
     */
    list: Array<UserListDTO>;
    /**
     *
     * @type {number}
     * @memberof PageableListDTOUserListDTO
     */
    numPages: number;
}
/**
 *
 * @export
 * @interface PeriodCreateDTO
 */
export interface PeriodCreateDTO {
    /**
     *
     * @type {string}
     * @memberof PeriodCreateDTO
     */
    startDate: string;
    /**
     *
     * @type {string}
     * @memberof PeriodCreateDTO
     */
    endDate: string;
}
/**
 *
 * @export
 * @interface PeriodDTO
 */
export interface PeriodDTO {
    /**
     *
     * @type {boolean}
     * @memberof PeriodDTO
     */
    isAvailable: boolean;
    /**
     *
     * @type {string}
     * @memberof PeriodDTO
     */
    endDate: string;
    /**
     *
     * @type {string}
     * @memberof PeriodDTO
     */
    startDate: string;
}
/**
 *
 * @export
 * @interface PeriodShortDTO
 */
export interface PeriodShortDTO {
    /**
     *
     * @type {number}
     * @memberof PeriodShortDTO
     */
    periodNum: number;
    /**
     *
     * @type {string}
     * @memberof PeriodShortDTO
     */
    startDate: string;
    /**
     *
     * @type {string}
     * @memberof PeriodShortDTO
     */
    endDate: string;
    /**
     *
     * @type {number}
     * @memberof PeriodShortDTO
     */
    availableDays: number;
}
/**
 *
 * @export
 * @interface PeriodUpdateDTO
 */
export interface PeriodUpdateDTO {
    /**
     *
     * @type {string}
     * @memberof PeriodUpdateDTO
     */
    startDate?: string;
    /**
     *
     * @type {string}
     * @memberof PeriodUpdateDTO
     */
    endDate?: string;
    /**
     *
     * @type {number}
     * @memberof PeriodUpdateDTO
     */
    availableFrom?: number;
}
/**
 *
 * @export
 * @interface ReservationApartmentsListDTO
 */
export interface ReservationApartmentsListDTO {
    /**
     *
     * @type {number}
     * @memberof ReservationApartmentsListDTO
     */
    reservationNum: number;
    /**
     *
     * @type {string}
     * @memberof ReservationApartmentsListDTO
     */
    startDate: string;
    /**
     *
     * @type {string}
     * @memberof ReservationApartmentsListDTO
     */
    endDate: string;
    /**
     *
     * @type {ReservationStateShortDTO}
     * @memberof ReservationApartmentsListDTO
     */
    state: ReservationStateShortDTO;
    /**
     *
     * @type {number}
     * @memberof ReservationApartmentsListDTO
     */
    numGuests: number;
    /**
     *
     * @type {number}
     * @memberof ReservationApartmentsListDTO
     */
    periodNum: number;
    /**
     *
     * @type {UserShortDTO}
     * @memberof ReservationApartmentsListDTO
     */
    client: UserShortDTO;
}
/**
 *
 * @export
 * @interface ReservationCreateDTO
 */
export interface ReservationCreateDTO {
    /**
     *
     * @type {string}
     * @memberof ReservationCreateDTO
     */
    startDate: string;
    /**
     *
     * @type {string}
     * @memberof ReservationCreateDTO
     */
    endDate: string;
    /**
     *
     * @type {number}
     * @memberof ReservationCreateDTO
     */
    numGuests: number;
    /**
     *
     * @type {string}
     * @memberof ReservationCreateDTO
     */
    clientId: string;
}
/**
 *
 * @export
 * @interface ReservationDTO
 */
export interface ReservationDTO {
    /**
     *
     * @type {number}
     * @memberof ReservationDTO
     */
    reservationNum: number;
    /**
     *
     * @type {string}
     * @memberof ReservationDTO
     */
    startDate: string;
    /**
     *
     * @type {string}
     * @memberof ReservationDTO
     */
    endDate: string;
    /**
     *
     * @type {ReservationStateDTO}
     * @memberof ReservationDTO
     */
    state: ReservationStateDTO;
    /**
     *
     * @type {number}
     * @memberof ReservationDTO
     */
    numGuests: number;
    /**
     *
     * @type {UserShortDTO}
     * @memberof ReservationDTO
     */
    client: UserShortDTO;
    /**
     *
     * @type {PeriodShortDTO}
     * @memberof ReservationDTO
     */
    period: PeriodShortDTO;
    /**
     *
     * @type {ApartmentShortDTO}
     * @memberof ReservationDTO
     */
    apartment: ApartmentShortDTO;
    /**
     *
     * @type {ReviewDTO}
     * @memberof ReservationDTO
     */
    review?: ReviewDTO;
}
/**
 *
 * @export
 * @interface ReservationLimitedDTO
 */
export interface ReservationLimitedDTO {
    /**
     *
     * @type {number}
     * @memberof ReservationLimitedDTO
     */
    reservationNum: number;
    /**
     *
     * @type {string}
     * @memberof ReservationLimitedDTO
     */
    startDate: string;
    /**
     *
     * @type {string}
     * @memberof ReservationLimitedDTO
     */
    endDate: string;
    /**
     *
     * @type {number}
     * @memberof ReservationLimitedDTO
     */
    numGuests: number;
}
/**
 *
 * @export
 * @interface ReservationStateCreateDTO
 */
export interface ReservationStateCreateDTO {
    /**
     *
     * @type {string}
     * @memberof ReservationStateCreateDTO
     */
    name: ReservationStateCreateDTO.NameEnum;
    /**
     *
     * @type {string}
     * @memberof ReservationStateCreateDTO
     */
    startDate: string;
}

/**
 * @export
 * @namespace ReservationStateCreateDTO
 */
export namespace ReservationStateCreateDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum NameEnum {
        UNDERCONSIDERATION = <any> 'UNDER_CONSIDERATION',
        BOOKED = <any> 'BOOKED',
        OCCUPIED = <any> 'OCCUPIED',
        AWAITINGREVIEW = <any> 'AWAITING_REVIEW',
        CLOSED = <any> 'CLOSED',
        CANCELED = <any> 'CANCELED'
    }
}
/**
 *
 * @export
 * @interface ReservationStateDTO
 */
export interface ReservationStateDTO {
    /**
     *
     * @type {string}
     * @memberof ReservationStateDTO
     */
    name: ReservationStateDTO.NameEnum;
    /**
     *
     * @type {string}
     * @memberof ReservationStateDTO
     */
    startDate: string;
    /**
     *
     * @type {string}
     * @memberof ReservationStateDTO
     */
    endDate?: string;
}

/**
 * @export
 * @namespace ReservationStateDTO
 */
export namespace ReservationStateDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum NameEnum {
        UNDERCONSIDERATION = <any> 'UNDER_CONSIDERATION',
        BOOKED = <any> 'BOOKED',
        OCCUPIED = <any> 'OCCUPIED',
        AWAITINGREVIEW = <any> 'AWAITING_REVIEW',
        CLOSED = <any> 'CLOSED',
        CANCELED = <any> 'CANCELED'
    }
}
/**
 *
 * @export
 * @interface ReservationStateShortDTO
 */
export interface ReservationStateShortDTO {
    /**
     *
     * @type {string}
     * @memberof ReservationStateShortDTO
     */
    name: ReservationStateShortDTO.NameEnum;
}

/**
 * @export
 * @namespace ReservationStateShortDTO
 */
export namespace ReservationStateShortDTO {
    /**
     * @export
     * @enum {string}
     */
    export enum NameEnum {
        UNDERCONSIDERATION = <any> 'UNDER_CONSIDERATION',
        BOOKED = <any> 'BOOKED',
        OCCUPIED = <any> 'OCCUPIED',
        AWAITINGREVIEW = <any> 'AWAITING_REVIEW',
        CLOSED = <any> 'CLOSED',
        CANCELED = <any> 'CANCELED'
    }
}
/**
 *
 * @export
 * @interface ReservationStateUpdateDTO
 */
export interface ReservationStateUpdateDTO {
    /**
     *
     * @type {string}
     * @memberof ReservationStateUpdateDTO
     */
    endDate?: string;
    /**
     *
     * @type {ReservationStateCreateDTO}
     * @memberof ReservationStateUpdateDTO
     */
    nextState: ReservationStateCreateDTO;
}
/**
 *
 * @export
 * @interface ReservationUsersListDTO
 */
export interface ReservationUsersListDTO {
    /**
     *
     * @type {number}
     * @memberof ReservationUsersListDTO
     */
    reservationNum: number;
    /**
     *
     * @type {string}
     * @memberof ReservationUsersListDTO
     */
    startDate: string;
    /**
     *
     * @type {string}
     * @memberof ReservationUsersListDTO
     */
    endDate: string;
    /**
     *
     * @type {ReservationStateShortDTO}
     * @memberof ReservationUsersListDTO
     */
    state: ReservationStateShortDTO;
    /**
     *
     * @type {number}
     * @memberof ReservationUsersListDTO
     */
    numGuests: number;
    /**
     *
     * @type {number}
     * @memberof ReservationUsersListDTO
     */
    periodNum: number;
    /**
     *
     * @type {ApartmentShortDTO}
     * @memberof ReservationUsersListDTO
     */
    apartment: ApartmentShortDTO;
}
/**
 *
 * @export
 * @interface ReviewApartmentsListDTO
 */
export interface ReviewApartmentsListDTO {
    /**
     *
     * @type {string}
     * @memberof ReviewApartmentsListDTO
     */
    text: string;
    /**
     *
     * @type {number}
     * @memberof ReviewApartmentsListDTO
     */
    rating: number;
    /**
     *
     * @type {UserShortDTO}
     * @memberof ReviewApartmentsListDTO
     */
    author: UserShortDTO;
}
/**
 *
 * @export
 * @interface ReviewCreateDTO
 */
export interface ReviewCreateDTO {
    /**
     *
     * @type {string}
     * @memberof ReviewCreateDTO
     */
    text: string;
    /**
     *
     * @type {number}
     * @memberof ReviewCreateDTO
     */
    rating: number;
    /**
     *
     * @type {string}
     * @memberof ReviewCreateDTO
     */
    date: string;
}
/**
 *
 * @export
 * @interface ReviewDTO
 */
export interface ReviewDTO {
    /**
     *
     * @type {string}
     * @memberof ReviewDTO
     */
    text?: string;
    /**
     *
     * @type {number}
     * @memberof ReviewDTO
     */
    rating?: number;
}
/**
 *
 * @export
 * @interface ReviewUsersListDTO
 */
export interface ReviewUsersListDTO {
    /**
     *
     * @type {string}
     * @memberof ReviewUsersListDTO
     */
    text: string;
    /**
     *
     * @type {number}
     * @memberof ReviewUsersListDTO
     */
    rating: number;
    /**
     *
     * @type {ApartmentShortInfoDTO}
     * @memberof ReviewUsersListDTO
     */
    apartment: ApartmentShortInfoDTO;
}
/**
 *
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    picture: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    phone: string;
    /**
     *
     * @type {Array<ApartmentShortDTO>}
     * @memberof UserDTO
     */
    apartments: Array<ApartmentShortDTO>;
}
/**
 *
 * @export
 * @interface UserDeleteDTO
 */
export interface UserDeleteDTO {
    /**
     *
     * @type {string}
     * @memberof UserDeleteDTO
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof UserDeleteDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof UserDeleteDTO
     */
    email: string;
}
/**
 *
 * @export
 * @interface UserListDTO
 */
export interface UserListDTO {
    /**
     *
     * @type {string}
     * @memberof UserListDTO
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof UserListDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof UserListDTO
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof UserListDTO
     */
    picture: string;
    /**
     *
     * @type {string}
     * @memberof UserListDTO
     */
    phone: string;
}
/**
 *
 * @export
 * @interface UserPasswordlessDTO
 */
export interface UserPasswordlessDTO {
    /**
     *
     * @type {string}
     * @memberof UserPasswordlessDTO
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof UserPasswordlessDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof UserPasswordlessDTO
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof UserPasswordlessDTO
     */
    picture: string;
    /**
     *
     * @type {string}
     * @memberof UserPasswordlessDTO
     */
    phone: string;
    /**
     *
     * @type {Array<ApartmentShortDTO>}
     * @memberof UserPasswordlessDTO
     */
    apartments: Array<ApartmentShortDTO>;
}
/**
 *
 * @export
 * @interface UserShortDTO
 */
export interface UserShortDTO {
    /**
     *
     * @type {string}
     * @memberof UserShortDTO
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof UserShortDTO
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof UserShortDTO
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof UserShortDTO
     */
    phone: string;
}
/**
 *
 * @export
 * @interface UserUpdateDTO
 */
export interface UserUpdateDTO {
    /**
     *
     * @type {string}
     * @memberof UserUpdateDTO
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof UserUpdateDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UserUpdateDTO
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof UserUpdateDTO
     */
    picture?: string;
    /**
     *
     * @type {string}
     * @memberof UserUpdateDTO
     */
    phone?: string;
}
/**
 * ApartmentsApi - fetch parameter creator
 * @export
 */
export const ApartmentsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new apartment
         * @summary Add a new apartment
         * @param {ApartmentCreateDTO} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApartment(body: ApartmentCreateDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addApartment.');
            }
            const localVarPath = `/api/apartments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ApartmentCreateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new period
         * @summary Add a new period
         * @param {PeriodCreateDTO} body
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeriod(body: PeriodCreateDTO, apartmentId: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addPeriod.');
            }
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling addPeriod.');
            }
            const localVarPath = `/api/apartments/{apartmentId}/periods`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PeriodCreateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new reservation to the period
         * @summary Add a new reservation to the period
         * @param {ReservationCreateDTO} body
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReservation(body: ReservationCreateDTO, apartmentId: number, periodNum: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addReservation.');
            }
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling addReservation.');
            }
            // verify required parameter 'periodNum' is not null or undefined
            if (periodNum === null || periodNum === undefined) {
                throw new RequiredError('periodNum','Required parameter periodNum was null or undefined when calling addReservation.');
            }
            const localVarPath = `/api/apartments/{apartmentId}/periods/{periodNum}`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)))
                .replace(`{${"periodNum"}}`, encodeURIComponent(String(periodNum)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReservationCreateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an apartment
         * @summary Delete an apartment
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApartment(apartmentId: number, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling deleteApartment.');
            }
            const localVarPath = `/api/apartments/{apartmentId}`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an apartment period
         * @summary Delete an apartment period
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeriod(apartmentId: number, periodNum: number, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling deletePeriod.');
            }
            // verify required parameter 'periodNum' is not null or undefined
            if (periodNum === null || periodNum === undefined) {
                throw new RequiredError('periodNum','Required parameter periodNum was null or undefined when calling deletePeriod.');
            }
            const localVarPath = `/api/apartments/{apartmentId}/periods/{periodNum}`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)))
                .replace(`{${"periodNum"}}`, encodeURIComponent(String(periodNum)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find an apartment by id
         * @summary Get an apartment
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartment(apartmentId: number, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling getApartment.');
            }
            const localVarPath = `/api/apartments/{apartmentId}`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find an apartment period by id
         * @summary Get an apartment period
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriod(apartmentId: number, periodNum: number, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling getPeriod.');
            }
            // verify required parameter 'periodNum' is not null or undefined
            if (periodNum === null || periodNum === undefined) {
                throw new RequiredError('periodNum','Required parameter periodNum was null or undefined when calling getPeriod.');
            }
            const localVarPath = `/api/apartments/{apartmentId}/periods/{periodNum}`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)))
                .replace(`{${"periodNum"}}`, encodeURIComponent(String(periodNum)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search reservations according to search parameters
         * @summary Returns a list of the reservations of an apartment
         * @param {number} apartmentId
         * @param {number} pg
         * @param {number} len
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {string} [client]
         * @param {Array<string>} [states]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApartmentReservations(apartmentId: number, pg: number, len: number, startDate?: string, endDate?: string, client?: string, states?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling searchApartmentReservations.');
            }
            // verify required parameter 'pg' is not null or undefined
            if (pg === null || pg === undefined) {
                throw new RequiredError('pg','Required parameter pg was null or undefined when calling searchApartmentReservations.');
            }
            // verify required parameter 'len' is not null or undefined
            if (len === null || len === undefined) {
                throw new RequiredError('len','Required parameter len was null or undefined when calling searchApartmentReservations.');
            }
            const localVarPath = `/api/apartments/{apartmentId}/reservations`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }

            if (client !== undefined) {
                localVarQueryParameter['client'] = client;
            }

            if (states) {
                localVarQueryParameter['states'] = states;
            }

            if (pg !== undefined) {
                localVarQueryParameter['pg'] = pg;
            }

            if (len !== undefined) {
                localVarQueryParameter['len'] = len;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search reviews according to search parameters
         * @summary Returns a list of reviews of an apartment
         * @param {number} apartmentId
         * @param {number} pg
         * @param {number} len
         * @param {number} [rating]
         * @param {string} [author]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApartmentReviews(apartmentId: number, pg: number, len: number, rating?: number, author?: string, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling searchApartmentReviews.');
            }
            // verify required parameter 'pg' is not null or undefined
            if (pg === null || pg === undefined) {
                throw new RequiredError('pg','Required parameter pg was null or undefined when calling searchApartmentReviews.');
            }
            // verify required parameter 'len' is not null or undefined
            if (len === null || len === undefined) {
                throw new RequiredError('len','Required parameter len was null or undefined when calling searchApartmentReviews.');
            }
            const localVarPath = `/api/apartments/{apartmentId}/reviews`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (pg !== undefined) {
                localVarQueryParameter['pg'] = pg;
            }

            if (len !== undefined) {
                localVarQueryParameter['len'] = len;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search apartments according to search parameters
         * @summary Search apartments
         * @param {number} pg
         * @param {number} len
         * @param {string} [name]
         * @param {string} [location]
         * @param {Array<string>} [amenities]
         * @param {number} [price]
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {boolean} [isAvailable]
         * @param {string} [owner]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApartments(pg: number, len: number, name?: string, location?: string, amenities?: Array<string>, price?: number, startDate?: string, endDate?: string, isAvailable?: boolean, owner?: string, options: any = {}): FetchArgs {
            // verify required parameter 'pg' is not null or undefined
            if (pg === null || pg === undefined) {
                throw new RequiredError('pg','Required parameter pg was null or undefined when calling searchApartments.');
            }
            // verify required parameter 'len' is not null or undefined
            if (len === null || len === undefined) {
                throw new RequiredError('len','Required parameter len was null or undefined when calling searchApartments.');
            }
            const localVarPath = `/api/apartments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (amenities) {
                localVarQueryParameter['amenities'] = amenities;
            }

            if (price !== undefined) {
                localVarQueryParameter['price'] = price;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }

            if (isAvailable !== undefined) {
                localVarQueryParameter['isAvailable'] = isAvailable;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (pg !== undefined) {
                localVarQueryParameter['pg'] = pg;
            }

            if (len !== undefined) {
                localVarQueryParameter['len'] = len;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search periods according to search parameters
         * @summary Search periods
         * @param {number} apartmentId
         * @param {number} pg
         * @param {number} len
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {boolean} [isAvailable]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPeriods(apartmentId: number, pg: number, len: number, startDate?: string, endDate?: string, isAvailable?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling searchPeriods.');
            }
            // verify required parameter 'pg' is not null or undefined
            if (pg === null || pg === undefined) {
                throw new RequiredError('pg','Required parameter pg was null or undefined when calling searchPeriods.');
            }
            // verify required parameter 'len' is not null or undefined
            if (len === null || len === undefined) {
                throw new RequiredError('len','Required parameter len was null or undefined when calling searchPeriods.');
            }
            const localVarPath = `/api/apartments/{apartmentId}/periods`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }

            if (isAvailable !== undefined) {
                localVarQueryParameter['isAvailable'] = isAvailable;
            }

            if (pg !== undefined) {
                localVarQueryParameter['pg'] = pg;
            }

            if (len !== undefined) {
                localVarQueryParameter['len'] = len;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing apartment by id
         * @summary Update an existing apartment
         * @param {ApartmentUpdateDTO} body
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApartment(body: ApartmentUpdateDTO, apartmentId: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateApartment.');
            }
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling updateApartment.');
            }
            const localVarPath = `/api/apartments/{apartmentId}`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ApartmentUpdateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a existing period by id
         * @summary Update a existing period
         * @param {PeriodUpdateDTO} body
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePeriod(body: PeriodUpdateDTO, apartmentId: number, periodNum: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePeriod.');
            }
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling updatePeriod.');
            }
            // verify required parameter 'periodNum' is not null or undefined
            if (periodNum === null || periodNum === undefined) {
                throw new RequiredError('periodNum','Required parameter periodNum was null or undefined when calling updatePeriod.');
            }
            const localVarPath = `/api/apartments/{apartmentId}/periods/{periodNum}`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)))
                .replace(`{${"periodNum"}}`, encodeURIComponent(String(periodNum)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PeriodUpdateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApartmentsApi - functional programming interface
 * @export
 */
export const ApartmentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a new apartment
         * @summary Add a new apartment
         * @param {ApartmentCreateDTO} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApartment(body: ApartmentCreateDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).addApartment(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Add a new period
         * @summary Add a new period
         * @param {PeriodCreateDTO} body
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeriod(body: PeriodCreateDTO, apartmentId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).addPeriod(body, apartmentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Add a new reservation to the period
         * @summary Add a new reservation to the period
         * @param {ReservationCreateDTO} body
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReservation(body: ReservationCreateDTO, apartmentId: number, periodNum: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).addReservation(body, apartmentId, periodNum, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.text(); //
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an apartment
         * @summary Delete an apartment
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApartment(apartmentId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApartmentDeleteDTO> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).deleteApartment(apartmentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an apartment period
         * @summary Delete an apartment period
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeriod(apartmentId: number, periodNum: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PeriodShortDTO> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).deletePeriod(apartmentId, periodNum, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Find an apartment by id
         * @summary Get an apartment
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartment(apartmentId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApartmentDTO> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).getApartment(apartmentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Find an apartment period by id
         * @summary Get an apartment period
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriod(apartmentId: number, periodNum: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PeriodDTO> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).getPeriod(apartmentId, periodNum, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Search reservations according to search parameters
         * @summary Returns a list of the reservations of an apartment
         * @param {number} apartmentId
         * @param {number} pg
         * @param {number} len
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {string} [client]
         * @param {Array<string>} [states]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApartmentReservations(apartmentId: number, pg: number, len: number, startDate?: string, endDate?: string, client?: string, states?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageableListDTOReservationApartmentsListDTO> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).searchApartmentReservations(apartmentId, pg, len, startDate, endDate, client, states, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Search reviews according to search parameters
         * @summary Returns a list of reviews of an apartment
         * @param {number} apartmentId
         * @param {number} pg
         * @param {number} len
         * @param {number} [rating]
         * @param {string} [author]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApartmentReviews(apartmentId: number, pg: number, len: number, rating?: number, author?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewApartmentsListDTO>> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).searchApartmentReviews(apartmentId, pg, len, rating, author, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Search apartments according to search parameters
         * @summary Search apartments
         * @param {number} pg
         * @param {number} len
         * @param {string} [name]
         * @param {string} [location]
         * @param {Array<string>} [amenities]
         * @param {number} [price]
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {boolean} [isAvailable]
         * @param {string} [owner]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApartments(pg: number, len: number, name?: string, location?: string, amenities?: Array<string>, price?: number, startDate?: string, endDate?: string, isAvailable?: boolean, owner?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageableListDTOApartmentListDTO> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).searchApartments(pg, len, name, location, amenities, price, startDate, endDate, isAvailable, owner, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Search periods according to search parameters
         * @summary Search periods
         * @param {number} apartmentId
         * @param {number} pg
         * @param {number} len
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {boolean} [isAvailable]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPeriods(apartmentId: number, pg: number, len: number, startDate?: string, endDate?: string, isAvailable?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PeriodShortDTO>> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).searchPeriods(apartmentId, pg, len, startDate, endDate, isAvailable, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update an existing apartment by id
         * @summary Update an existing apartment
         * @param {ApartmentUpdateDTO} body
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApartment(body: ApartmentUpdateDTO, apartmentId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApartmentUpdateDTO> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).updateApartment(body, apartmentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a existing period by id
         * @summary Update a existing period
         * @param {PeriodUpdateDTO} body
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePeriod(body: PeriodUpdateDTO, apartmentId: number, periodNum: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PeriodUpdateDTO> {
            const localVarFetchArgs = ApartmentsApiFetchParamCreator(configuration).updatePeriod(body, apartmentId, periodNum, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ApartmentsApi - factory interface
 * @export
 */
export const ApartmentsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Add a new apartment
         * @summary Add a new apartment
         * @param {ApartmentCreateDTO} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApartment(body: ApartmentCreateDTO, options?: any) {
            return ApartmentsApiFp(configuration).addApartment(body, options)(fetch, basePath);
        },
        /**
         * Add a new period
         * @summary Add a new period
         * @param {PeriodCreateDTO} body
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeriod(body: PeriodCreateDTO, apartmentId: number, options?: any) {
            return ApartmentsApiFp(configuration).addPeriod(body, apartmentId, options)(fetch, basePath);
        },
        /**
         * Add a new reservation to the period
         * @summary Add a new reservation to the period
         * @param {ReservationCreateDTO} body
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReservation(body: ReservationCreateDTO, apartmentId: number, periodNum: number, options?: any) {
            return ApartmentsApiFp(configuration).addReservation(body, apartmentId, periodNum, options)(fetch, basePath);
        },
        /**
         * Delete an apartment
         * @summary Delete an apartment
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApartment(apartmentId: number, options?: any) {
            return ApartmentsApiFp(configuration).deleteApartment(apartmentId, options)(fetch, basePath);
        },
        /**
         * Delete an apartment period
         * @summary Delete an apartment period
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeriod(apartmentId: number, periodNum: number, options?: any) {
            return ApartmentsApiFp(configuration).deletePeriod(apartmentId, periodNum, options)(fetch, basePath);
        },
        /**
         * Find an apartment by id
         * @summary Get an apartment
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartment(apartmentId: number, options?: any) {
            return ApartmentsApiFp(configuration).getApartment(apartmentId, options)(fetch, basePath);
        },
        /**
         * Find an apartment period by id
         * @summary Get an apartment period
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriod(apartmentId: number, periodNum: number, options?: any) {
            return ApartmentsApiFp(configuration).getPeriod(apartmentId, periodNum, options)(fetch, basePath);
        },
        /**
         * Search reservations according to search parameters
         * @summary Returns a list of the reservations of an apartment
         * @param {number} apartmentId
         * @param {number} pg
         * @param {number} len
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {string} [client]
         * @param {Array<string>} [states]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApartmentReservations(apartmentId: number, pg: number, len: number, startDate?: string, endDate?: string, client?: string, states?: Array<string>, options?: any) {
            return ApartmentsApiFp(configuration).searchApartmentReservations(apartmentId, pg, len, startDate, endDate, client, states, options)(fetch, basePath);
        },
        /**
         * Search reviews according to search parameters
         * @summary Returns a list of reviews of an apartment
         * @param {number} apartmentId
         * @param {number} pg
         * @param {number} len
         * @param {number} [rating]
         * @param {string} [author]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApartmentReviews(apartmentId: number, pg: number, len: number, rating?: number, author?: string, options?: any) {
            return ApartmentsApiFp(configuration).searchApartmentReviews(apartmentId, pg, len, rating, author, options)(fetch, basePath);
        },
        /**
         * Search apartments according to search parameters
         * @summary Search apartments
         * @param {number} pg
         * @param {number} len
         * @param {string} [name]
         * @param {string} [location]
         * @param {Array<string>} [amenities]
         * @param {number} [price]
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {boolean} [isAvailable]
         * @param {string} [owner]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApartments(pg: number, len: number, name?: string, location?: string, amenities?: Array<string>, price?: number, startDate?: string, endDate?: string, isAvailable?: boolean, owner?: string, options?: any) {
            return ApartmentsApiFp(configuration).searchApartments(pg, len, name, location, amenities, price, startDate, endDate, isAvailable, owner, options)(fetch, basePath);
        },
        /**
         * Search periods according to search parameters
         * @summary Search periods
         * @param {number} apartmentId
         * @param {number} pg
         * @param {number} len
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {boolean} [isAvailable]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPeriods(apartmentId: number, pg: number, len: number, startDate?: string, endDate?: string, isAvailable?: boolean, options?: any) {
            return ApartmentsApiFp(configuration).searchPeriods(apartmentId, pg, len, startDate, endDate, isAvailable, options)(fetch, basePath);
        },
        /**
         * Update an existing apartment by id
         * @summary Update an existing apartment
         * @param {ApartmentUpdateDTO} body
         * @param {number} apartmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApartment(body: ApartmentUpdateDTO, apartmentId: number, options?: any) {
            return ApartmentsApiFp(configuration).updateApartment(body, apartmentId, options)(fetch, basePath);
        },
        /**
         * Update a existing period by id
         * @summary Update a existing period
         * @param {PeriodUpdateDTO} body
         * @param {number} apartmentId
         * @param {number} periodNum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePeriod(body: PeriodUpdateDTO, apartmentId: number, periodNum: number, options?: any) {
            return ApartmentsApiFp(configuration).updatePeriod(body, apartmentId, periodNum, options)(fetch, basePath);
        },
    };
};

/**
 * ApartmentsApi - object-oriented interface
 * @export
 * @class ApartmentsApi
 * @extends {BaseAPI}
 */
export class ApartmentsApi extends BaseAPI {
    /**
     * Add a new apartment
     * @summary Add a new apartment
     * @param {ApartmentCreateDTO} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public addApartment(body: ApartmentCreateDTO, options?: any) {
        return ApartmentsApiFp(this.configuration).addApartment(body, options)(this.fetch, this.basePath);
    }

    /**
     * Add a new period
     * @summary Add a new period
     * @param {PeriodCreateDTO} body
     * @param {number} apartmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public addPeriod(body: PeriodCreateDTO, apartmentId: number, options?: any) {
        return ApartmentsApiFp(this.configuration).addPeriod(body, apartmentId, options)(this.fetch, this.basePath);
    }

    /**
     * Add a new reservation to the period
     * @summary Add a new reservation to the period
     * @param {ReservationCreateDTO} body
     * @param {number} apartmentId
     * @param {number} periodNum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public addReservation(body: ReservationCreateDTO, apartmentId: number, periodNum: number, options?: any) {
        return ApartmentsApiFp(this.configuration).addReservation(body, apartmentId, periodNum, options)(this.fetch, this.basePath);
    }

    /**
     * Delete an apartment
     * @summary Delete an apartment
     * @param {number} apartmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public deleteApartment(apartmentId: number, options?: any) {
        return ApartmentsApiFp(this.configuration).deleteApartment(apartmentId, options)(this.fetch, this.basePath);
    }

    /**
     * Delete an apartment period
     * @summary Delete an apartment period
     * @param {number} apartmentId
     * @param {number} periodNum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public deletePeriod(apartmentId: number, periodNum: number, options?: any) {
        return ApartmentsApiFp(this.configuration).deletePeriod(apartmentId, periodNum, options)(this.fetch, this.basePath);
    }

    /**
     * Find an apartment by id
     * @summary Get an apartment
     * @param {number} apartmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public getApartment(apartmentId: number, options?: any) {
        return ApartmentsApiFp(this.configuration).getApartment(apartmentId, options)(this.fetch, this.basePath);
    }

    /**
     * Find an apartment period by id
     * @summary Get an apartment period
     * @param {number} apartmentId
     * @param {number} periodNum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public getPeriod(apartmentId: number, periodNum: number, options?: any) {
        return ApartmentsApiFp(this.configuration).getPeriod(apartmentId, periodNum, options)(this.fetch, this.basePath);
    }

    /**
     * Search reservations according to search parameters
     * @summary Returns a list of the reservations of an apartment
     * @param {number} apartmentId
     * @param {number} pg
     * @param {number} len
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {string} [client]
     * @param {Array<string>} [states]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public searchApartmentReservations(apartmentId: number, pg: number, len: number, startDate?: string, endDate?: string, client?: string, states?: Array<string>, options?: any) {
        return ApartmentsApiFp(this.configuration).searchApartmentReservations(apartmentId, pg, len, startDate, endDate, client, states, options)(this.fetch, this.basePath);
    }

    /**
     * Search reviews according to search parameters
     * @summary Returns a list of reviews of an apartment
     * @param {number} apartmentId
     * @param {number} pg
     * @param {number} len
     * @param {number} [rating]
     * @param {string} [author]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public searchApartmentReviews(apartmentId: number, pg: number, len: number, rating?: number, author?: string, options?: any) {
        return ApartmentsApiFp(this.configuration).searchApartmentReviews(apartmentId, pg, len, rating, author, options)(this.fetch, this.basePath);
    }

    /**
     * Search apartments according to search parameters
     * @summary Search apartments
     * @param {number} pg
     * @param {number} len
     * @param {string} [name]
     * @param {string} [location]
     * @param {Array<string>} [amenities]
     * @param {number} [price]
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {boolean} [isAvailable]
     * @param {string} [owner]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public searchApartments(pg: number, len: number, name?: string, location?: string, amenities?: Array<string>, price?: number, startDate?: string, endDate?: string, isAvailable?: boolean, owner?: string, options?: any) {
        return ApartmentsApiFp(this.configuration).searchApartments(pg, len, name, location, amenities, price, startDate, endDate, isAvailable, owner, options)(this.fetch, this.basePath);
    }

    /**
     * Search periods according to search parameters
     * @summary Search periods
     * @param {number} apartmentId
     * @param {number} pg
     * @param {number} len
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {boolean} [isAvailable]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public searchPeriods(apartmentId: number, pg: number, len: number, startDate?: string, endDate?: string, isAvailable?: boolean, options?: any) {
        return ApartmentsApiFp(this.configuration).searchPeriods(apartmentId, pg, len, startDate, endDate, isAvailable, options)(this.fetch, this.basePath);
    }

    /**
     * Update an existing apartment by id
     * @summary Update an existing apartment
     * @param {ApartmentUpdateDTO} body
     * @param {number} apartmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public updateApartment(body: ApartmentUpdateDTO, apartmentId: number, options?: any) {
        return ApartmentsApiFp(this.configuration).updateApartment(body, apartmentId, options)(this.fetch, this.basePath);
    }

    /**
     * Update a existing period by id
     * @summary Update a existing period
     * @param {PeriodUpdateDTO} body
     * @param {number} apartmentId
     * @param {number} periodNum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentsApi
     */
    public updatePeriod(body: PeriodUpdateDTO, apartmentId: number, periodNum: number, options?: any) {
        return ApartmentsApiFp(this.configuration).updatePeriod(body, apartmentId, periodNum, options)(this.fetch, this.basePath);
    }

}
/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Login user
         * @summary Login user
         * @param {LoginDTO} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(body: LoginDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling login.');
            }
            const localVarPath = `/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Login user
         * @summary Login user
         * @param {LoginDTO} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(body: LoginDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).login(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Login user
         * @summary Login user
         * @param {LoginDTO} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(body: LoginDTO, options?: any) {
            return AuthApiFp(configuration).login(body, options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Login user
     * @summary Login user
     * @param {LoginDTO} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(body: LoginDTO, options?: any) {
        return AuthApiFp(this.configuration).login(body, options)(this.fetch, this.basePath);
    }

}
/**
 * ReservationsApi - fetch parameter creator
 * @export
 */
export const ReservationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a review for a reservation
         * @summary Create a review for a reservation
         * @param {ReviewCreateDTO} body
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReview(body: ReviewCreateDTO, reservationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addReview.');
            }
            // verify required parameter 'reservationId' is not null or undefined
            if (reservationId === null || reservationId === undefined) {
                throw new RequiredError('reservationId','Required parameter reservationId was null or undefined when calling addReview.');
            }
            const localVarPath = `/api/reservations/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReviewCreateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel a reservation
         * @summary Cancel a reservation
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation(reservationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'reservationId' is not null or undefined
            if (reservationId === null || reservationId === undefined) {
                throw new RequiredError('reservationId','Required parameter reservationId was null or undefined when calling deleteReservation.');
            }
            const localVarPath = `/api/reservations/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find a reservation by id
         * @summary Get a reservation
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservation(reservationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'reservationId' is not null or undefined
            if (reservationId === null || reservationId === undefined) {
                throw new RequiredError('reservationId','Required parameter reservationId was null or undefined when calling getReservation.');
            }
            const localVarPath = `/api/reservations/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the states of a reservation whose id is reservationId.
         * @summary List state history of a reservation
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationStateHistory(reservationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'reservationId' is not null or undefined
            if (reservationId === null || reservationId === undefined) {
                throw new RequiredError('reservationId','Required parameter reservationId was null or undefined when calling getReservationStateHistory.');
            }
            const localVarPath = `/api/reservations/{reservationId}/states`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the state of a reservation whose id is reservationId.
         * @summary Update the state of a reservation
         * @param {ReservationStateUpdateDTO} body
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateState(body: ReservationStateUpdateDTO, reservationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateState.');
            }
            // verify required parameter 'reservationId' is not null or undefined
            if (reservationId === null || reservationId === undefined) {
                throw new RequiredError('reservationId','Required parameter reservationId was null or undefined when calling updateState.');
            }
            const localVarPath = `/api/reservations/{reservationId}/states`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReservationStateUpdateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservationsApi - functional programming interface
 * @export
 */
export const ReservationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a review for a reservation
         * @summary Create a review for a reservation
         * @param {ReviewCreateDTO} body
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReview(body: ReviewCreateDTO, reservationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReservationsApiFetchParamCreator(configuration).addReview(body, reservationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Cancel a reservation
         * @summary Cancel a reservation
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation(reservationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReservationLimitedDTO> {
            const localVarFetchArgs = ReservationsApiFetchParamCreator(configuration).deleteReservation(reservationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Find a reservation by id
         * @summary Get a reservation
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservation(reservationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReservationDTO> {
            const localVarFetchArgs = ReservationsApiFetchParamCreator(configuration).getReservation(reservationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of the states of a reservation whose id is reservationId.
         * @summary List state history of a reservation
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationStateHistory(reservationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReservationStateDTO>> {
            const localVarFetchArgs = ReservationsApiFetchParamCreator(configuration).getReservationStateHistory(reservationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates the state of a reservation whose id is reservationId.
         * @summary Update the state of a reservation
         * @param {ReservationStateUpdateDTO} body
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateState(body: ReservationStateUpdateDTO, reservationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReservationStateUpdateDTO> {
            const localVarFetchArgs = ReservationsApiFetchParamCreator(configuration).updateState(body, reservationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ReservationsApi - factory interface
 * @export
 */
export const ReservationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create a review for a reservation
         * @summary Create a review for a reservation
         * @param {ReviewCreateDTO} body
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReview(body: ReviewCreateDTO, reservationId: string, options?: any) {
            return ReservationsApiFp(configuration).addReview(body, reservationId, options)(fetch, basePath);
        },
        /**
         * Cancel a reservation
         * @summary Cancel a reservation
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation(reservationId: string, options?: any) {
            return ReservationsApiFp(configuration).deleteReservation(reservationId, options)(fetch, basePath);
        },
        /**
         * Find a reservation by id
         * @summary Get a reservation
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservation(reservationId: string, options?: any) {
            return ReservationsApiFp(configuration).getReservation(reservationId, options)(fetch, basePath);
        },
        /**
         * Returns a list of the states of a reservation whose id is reservationId.
         * @summary List state history of a reservation
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationStateHistory(reservationId: string, options?: any) {
            return ReservationsApiFp(configuration).getReservationStateHistory(reservationId, options)(fetch, basePath);
        },
        /**
         * Updates the state of a reservation whose id is reservationId.
         * @summary Update the state of a reservation
         * @param {ReservationStateUpdateDTO} body
         * @param {string} reservationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateState(body: ReservationStateUpdateDTO, reservationId: string, options?: any) {
            return ReservationsApiFp(configuration).updateState(body, reservationId, options)(fetch, basePath);
        },
    };
};

/**
 * ReservationsApi - object-oriented interface
 * @export
 * @class ReservationsApi
 * @extends {BaseAPI}
 */
export class ReservationsApi extends BaseAPI {
    /**
     * Create a review for a reservation
     * @summary Create a review for a reservation
     * @param {ReviewCreateDTO} body
     * @param {string} reservationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public addReview(body: ReviewCreateDTO, reservationId: string, options?: any) {
        return ReservationsApiFp(this.configuration).addReview(body, reservationId, options)(this.fetch, this.basePath);
    }

    /**
     * Cancel a reservation
     * @summary Cancel a reservation
     * @param {string} reservationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public deleteReservation(reservationId: string, options?: any) {
        return ReservationsApiFp(this.configuration).deleteReservation(reservationId, options)(this.fetch, this.basePath);
    }

    /**
     * Find a reservation by id
     * @summary Get a reservation
     * @param {string} reservationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public getReservation(reservationId: string, options?: any) {
        return ReservationsApiFp(this.configuration).getReservation(reservationId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a list of the states of a reservation whose id is reservationId.
     * @summary List state history of a reservation
     * @param {string} reservationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public getReservationStateHistory(reservationId: string, options?: any) {
        return ReservationsApiFp(this.configuration).getReservationStateHistory(reservationId, options)(this.fetch, this.basePath);
    }

    /**
     * Updates the state of a reservation whose id is reservationId.
     * @summary Update the state of a reservation
     * @param {ReservationStateUpdateDTO} body
     * @param {string} reservationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public updateState(body: ReservationStateUpdateDTO, reservationId: string, options?: any) {
        return ReservationsApiFp(this.configuration).updateState(body, reservationId, options)(this.fetch, this.basePath);
    }

}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a user
         * @summary Adds a user
         * @param {UserDTO} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(body: UserDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addUser.');
            }
            const localVarPath = `/api/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a user
         * @summary Delete user
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/api/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the user by its username
         * @summary Returns the user by its username
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getUser.');
            }
            const localVarPath = `/api/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search reservations according to search parameters
         * @summary Returns a list of reservations of a user
         * @param {string} username
         * @param {number} pg
         * @param {number} len
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {number} [apartment]
         * @param {Array<string>} [states]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserReservations(username: string, pg: number, len: number, startDate?: string, endDate?: string, apartment?: number, states?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling searchUserReservations.');
            }
            // verify required parameter 'pg' is not null or undefined
            if (pg === null || pg === undefined) {
                throw new RequiredError('pg','Required parameter pg was null or undefined when calling searchUserReservations.');
            }
            // verify required parameter 'len' is not null or undefined
            if (len === null || len === undefined) {
                throw new RequiredError('len','Required parameter len was null or undefined when calling searchUserReservations.');
            }
            const localVarPath = `/api/users/{username}/reservations`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }

            if (apartment !== undefined) {
                localVarQueryParameter['apartment'] = apartment;
            }

            if (states) {
                localVarQueryParameter['states'] = states;
            }

            if (pg !== undefined) {
                localVarQueryParameter['pg'] = pg;
            }

            if (len !== undefined) {
                localVarQueryParameter['len'] = len;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search reviews according to search parameters
         * @summary Returns a list of reviews of a user
         * @param {string} username
         * @param {number} pg
         * @param {number} len
         * @param {number} [rating]
         * @param {number} [apartment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserReviews(username: string, pg: number, len: number, rating?: number, apartment?: number, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling searchUserReviews.');
            }
            // verify required parameter 'pg' is not null or undefined
            if (pg === null || pg === undefined) {
                throw new RequiredError('pg','Required parameter pg was null or undefined when calling searchUserReviews.');
            }
            // verify required parameter 'len' is not null or undefined
            if (len === null || len === undefined) {
                throw new RequiredError('len','Required parameter len was null or undefined when calling searchUserReviews.');
            }
            const localVarPath = `/api/users/{username}/reviews`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }

            if (apartment !== undefined) {
                localVarQueryParameter['apartment'] = apartment;
            }

            if (pg !== undefined) {
                localVarQueryParameter['pg'] = pg;
            }

            if (len !== undefined) {
                localVarQueryParameter['len'] = len;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of users in the application system
         * @summary Returns a list of users in the application system
         * @param {number} pg
         * @param {number} len
         * @param {string} [name]
         * @param {string} [email]
         * @param {string} [phone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsers(pg: number, len: number, name?: string, email?: string, phone?: string, options: any = {}): FetchArgs {
            // verify required parameter 'pg' is not null or undefined
            if (pg === null || pg === undefined) {
                throw new RequiredError('pg','Required parameter pg was null or undefined when calling searchUsers.');
            }
            // verify required parameter 'len' is not null or undefined
            if (len === null || len === undefined) {
                throw new RequiredError('len','Required parameter len was null or undefined when calling searchUsers.');
            }
            const localVarPath = `/api/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }

            if (pg !== undefined) {
                localVarQueryParameter['pg'] = pg;
            }

            if (len !== undefined) {
                localVarQueryParameter['len'] = len;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing user
         * @summary Update an existing user
         * @param {UserUpdateDTO} body
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: UserUpdateDTO, username: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUser.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling updateUser.');
            }
            const localVarPath = `/api/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserUpdateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a user
         * @summary Adds a user
         * @param {UserDTO} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(body: UserDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).addUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a user
         * @summary Delete user
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDeleteDTO> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).deleteUser(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the user by its username
         * @summary Returns the user by its username
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserPasswordlessDTO> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getUser(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Search reservations according to search parameters
         * @summary Returns a list of reservations of a user
         * @param {string} username
         * @param {number} pg
         * @param {number} len
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {number} [apartment]
         * @param {Array<string>} [states]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserReservations(username: string, pg: number, len: number, startDate?: string, endDate?: string, apartment?: number, states?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageableListDTOReservationUsersListDTO> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).searchUserReservations(username, pg, len, startDate, endDate, apartment, states, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Search reviews according to search parameters
         * @summary Returns a list of reviews of a user
         * @param {string} username
         * @param {number} pg
         * @param {number} len
         * @param {number} [rating]
         * @param {number} [apartment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserReviews(username: string, pg: number, len: number, rating?: number, apartment?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewUsersListDTO>> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).searchUserReviews(username, pg, len, rating, apartment, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of users in the application system
         * @summary Returns a list of users in the application system
         * @param {number} pg
         * @param {number} len
         * @param {string} [name]
         * @param {string} [email]
         * @param {string} [phone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsers(pg: number, len: number, name?: string, email?: string, phone?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PageableListDTOUserListDTO> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).searchUsers(pg, len, name, email, phone, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an existing user
         * @summary Update an existing user
         * @param {UserUpdateDTO} body
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: UserUpdateDTO, username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserPasswordlessDTO> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).updateUser(body, username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Adds a user
         * @summary Adds a user
         * @param {UserDTO} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(body: UserDTO, options?: any) {
            return UsersApiFp(configuration).addUser(body, options)(fetch, basePath);
        },
        /**
         * Deletes a user
         * @summary Delete user
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(username: string, options?: any) {
            return UsersApiFp(configuration).deleteUser(username, options)(fetch, basePath);
        },
        /**
         * Returns the user by its username
         * @summary Returns the user by its username
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(username: string, options?: any) {
            return UsersApiFp(configuration).getUser(username, options)(fetch, basePath);
        },
        /**
         * Search reservations according to search parameters
         * @summary Returns a list of reservations of a user
         * @param {string} username
         * @param {number} pg
         * @param {number} len
         * @param {string} [startDate]
         * @param {string} [endDate]
         * @param {number} [apartment]
         * @param {Array<string>} [states]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserReservations(username: string, pg: number, len: number, startDate?: string, endDate?: string, apartment?: number, states?: Array<string>, options?: any) {
            return UsersApiFp(configuration).searchUserReservations(username, pg, len, startDate, endDate, apartment, states, options)(fetch, basePath);
        },
        /**
         * Search reviews according to search parameters
         * @summary Returns a list of reviews of a user
         * @param {string} username
         * @param {number} pg
         * @param {number} len
         * @param {number} [rating]
         * @param {number} [apartment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserReviews(username: string, pg: number, len: number, rating?: number, apartment?: number, options?: any) {
            return UsersApiFp(configuration).searchUserReviews(username, pg, len, rating, apartment, options)(fetch, basePath);
        },
        /**
         * Returns a list of users in the application system
         * @summary Returns a list of users in the application system
         * @param {number} pg
         * @param {number} len
         * @param {string} [name]
         * @param {string} [email]
         * @param {string} [phone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsers(pg: number, len: number, name?: string, email?: string, phone?: string, options?: any) {
            return UsersApiFp(configuration).searchUsers(pg, len, name, email, phone, options)(fetch, basePath);
        },
        /**
         * Updates an existing user
         * @summary Update an existing user
         * @param {UserUpdateDTO} body
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: UserUpdateDTO, username: string, options?: any) {
            return UsersApiFp(configuration).updateUser(body, username, options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Adds a user
     * @summary Adds a user
     * @param {UserDTO} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public addUser(body: UserDTO, options?: any) {
        return UsersApiFp(this.configuration).addUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes a user
     * @summary Delete user
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(username: string, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(username, options)(this.fetch, this.basePath);
    }

    /**
     * Returns the user by its username
     * @summary Returns the user by its username
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(username: string, options?: any) {
        return UsersApiFp(this.configuration).getUser(username, options)(this.fetch, this.basePath);
    }

    /**
     * Search reservations according to search parameters
     * @summary Returns a list of reservations of a user
     * @param {string} username
     * @param {number} pg
     * @param {number} len
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {number} [apartment]
     * @param {Array<string>} [states]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public searchUserReservations(username: string, pg: number, len: number, startDate?: string, endDate?: string, apartment?: number, states?: Array<string>, options?: any) {
        return UsersApiFp(this.configuration).searchUserReservations(username, pg, len, startDate, endDate, apartment, states, options)(this.fetch, this.basePath);
    }

    /**
     * Search reviews according to search parameters
     * @summary Returns a list of reviews of a user
     * @param {string} username
     * @param {number} pg
     * @param {number} len
     * @param {number} [rating]
     * @param {number} [apartment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public searchUserReviews(username: string, pg: number, len: number, rating?: number, apartment?: number, options?: any) {
        return UsersApiFp(this.configuration).searchUserReviews(username, pg, len, rating, apartment, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a list of users in the application system
     * @summary Returns a list of users in the application system
     * @param {number} pg
     * @param {number} len
     * @param {string} [name]
     * @param {string} [email]
     * @param {string} [phone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public searchUsers(pg: number, len: number, name?: string, email?: string, phone?: string, options?: any) {
        return UsersApiFp(this.configuration).searchUsers(pg, len, name, email, phone, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an existing user
     * @summary Update an existing user
     * @param {UserUpdateDTO} body
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(body: UserUpdateDTO, username: string, options?: any) {
        return UsersApiFp(this.configuration).updateUser(body, username, options)(this.fetch, this.basePath);
    }

}
