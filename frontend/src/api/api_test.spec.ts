/**
 * Apartment Reservation Management API
 * This API exposes endpoints to manage apartment reservations.
 *
 * OpenAPI spec version: 1.0
 * Contact: holidayacc@gmail.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ApartmentsApi", () => {
  let instance: api.ApartmentsApi
  beforeEach(function() {
    instance = new api.ApartmentsApi(config)
  });

  test("addApartment", () => {
    const body: api.ApartmentCreateDTO = undefined
    return expect(instance.addApartment(body, {})).resolves.toBe(null)
  })
  test("addPeriod", () => {
    const body: api.PeriodCreateDTO = undefined
    const apartmentId: number = 789
    return expect(instance.addPeriod(body, apartmentId, {})).resolves.toBe(null)
  })
  test("addReservation", () => {
    const body: api.ReservationCreateDTO = undefined
    const apartmentId: number = 789
    const periodNum: number = 56
    return expect(instance.addReservation(body, apartmentId, periodNum, {})).resolves.toBe(null)
  })
  test("deleteApartment", () => {
    const apartmentId: number = 789
    return expect(instance.deleteApartment(apartmentId, {})).resolves.toBe(null)
  })
  test("deletePeriod", () => {
    const apartmentId: number = 789
    const periodNum: number = 56
    return expect(instance.deletePeriod(apartmentId, periodNum, {})).resolves.toBe(null)
  })
  test("getApartment", () => {
    const apartmentId: number = 789
    return expect(instance.getApartment(apartmentId, {})).resolves.toBe(null)
  })
  test("getPeriod", () => {
    const apartmentId: number = 789
    const periodNum: number = 56
    return expect(instance.getPeriod(apartmentId, periodNum, {})).resolves.toBe(null)
  })
  test("searchApartmentReservations", () => {
    const apartmentId: number = 789
    const pg: number = 56
    const len: number = 56
    const startDate: string = "2013-10-20"
    const endDate: string = "2013-10-20"
    const client: string = "client_example"
    const states: Array<string> = undefined
    return expect(instance.searchApartmentReservations(apartmentId, pg, len, startDate, endDate, client, states, {})).resolves.toBe(null)
  })
  test("searchApartmentReviews", () => {
    const apartmentId: number = 789
    const pg: number = 56
    const len: number = 56
    const rating: number = 56
    const author: string = "author_example"
    return expect(instance.searchApartmentReviews(apartmentId, pg, len, rating, author, {})).resolves.toBe(null)
  })
  test("searchApartments", () => {
    const pg: number = 56
    const len: number = 56
    const name: string = "name_example"
    const location: string = "location_example"
    const amenities: Array<string> = undefined
    const price: number = 3.4
    const startDate: string = "2013-10-20"
    const endDate: string = "2013-10-20"
    const isAvailable: boolean = true
    const owner: string = "owner_example"
    return expect(instance.searchApartments(pg, len, name, location, amenities, price, startDate, endDate, isAvailable, owner, {})).resolves.toBe(null)
  })
  test("searchPeriods", () => {
    const apartmentId: number = 789
    const pg: number = 56
    const len: number = 56
    const startDate: string = "2013-10-20"
    const endDate: string = "2013-10-20"
    const isAvailable: boolean = true
    return expect(instance.searchPeriods(apartmentId, pg, len, startDate, endDate, isAvailable, {})).resolves.toBe(null)
  })
  test("updateApartment", () => {
    const body: api.ApartmentUpdateDTO = undefined
    const apartmentId: number = 789
    return expect(instance.updateApartment(body, apartmentId, {})).resolves.toBe(null)
  })
  test("updatePeriod", () => {
    const body: api.PeriodUpdateDTO = undefined
    const apartmentId: number = 789
    const periodNum: number = 56
    return expect(instance.updatePeriod(body, apartmentId, periodNum, {})).resolves.toBe(null)
  })
})

describe("AuthApi", () => {
  let instance: api.AuthApi
  beforeEach(function() {
    instance = new api.AuthApi(config)
  });

  test("login", () => {
    const body: api.LoginDTO = undefined
    return expect(instance.login(body, {})).resolves.toBe(null)
  })
})

describe("ReservationsApi", () => {
  let instance: api.ReservationsApi
  beforeEach(function() {
    instance = new api.ReservationsApi(config)
  });

  test("addReview", () => {
    const body: api.ReviewCreateDTO = undefined
    const reservationId: string = "reservationId_example"
    return expect(instance.addReview(body, reservationId, {})).resolves.toBe(null)
  })
  test("deleteReservation", () => {
    const reservationId: string = "reservationId_example"
    return expect(instance.deleteReservation(reservationId, {})).resolves.toBe(null)
  })
  test("getReservation", () => {
    const reservationId: string = "reservationId_example"
    return expect(instance.getReservation(reservationId, {})).resolves.toBe(null)
  })
  test("getReservationStateHistory", () => {
    const reservationId: string = "reservationId_example"
    return expect(instance.getReservationStateHistory(reservationId, {})).resolves.toBe(null)
  })
  test("updateState", () => {
    const body: api.ReservationStateUpdateDTO = undefined
    const reservationId: string = "reservationId_example"
    return expect(instance.updateState(body, reservationId, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("addUser", () => {
    const body: api.UserDTO = undefined
    return expect(instance.addUser(body, {})).resolves.toBe(null)
  })
  test("deleteUser", () => {
    const username: string = "username_example"
    return expect(instance.deleteUser(username, {})).resolves.toBe(null)
  })
  test("getUser", () => {
    const username: string = "username_example"
    return expect(instance.getUser(username, {})).resolves.toBe(null)
  })
  test("searchUserReservations", () => {
    const username: string = "username_example"
    const pg: number = 56
    const len: number = 56
    const startDate: string = "2013-10-20"
    const endDate: string = "2013-10-20"
    const apartment: number = 789
    const states: Array<string> = undefined
    return expect(instance.searchUserReservations(username, pg, len, startDate, endDate, apartment, states, {})).resolves.toBe(null)
  })
  test("searchUserReviews", () => {
    const username: string = "username_example"
    const pg: number = 56
    const len: number = 56
    const rating: number = 56
    const apartment: number = 789
    return expect(instance.searchUserReviews(username, pg, len, rating, apartment, {})).resolves.toBe(null)
  })
  test("searchUsers", () => {
    const pg: number = 56
    const len: number = 56
    const name: string = "name_example"
    const email: string = "email_example"
    const phone: string = "phone_example"
    return expect(instance.searchUsers(pg, len, name, email, phone, {})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const body: api.UserUpdateDTO = undefined
    const username: string = "username_example"
    return expect(instance.updateUser(body, username, {})).resolves.toBe(null)
  })
})

